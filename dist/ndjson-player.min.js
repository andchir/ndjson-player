/**
 * Author : A.Lepe (dev@alepe.com)
 * License: MIT
 * Version: 0.1.8
 * Updated: 2022-05-11
 * Content: ndjson-player.min.js (Bundle Minimized)
 */

!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.m2d2=t()}(this,(function(){"use strict";class e{isString(e){return"string"==typeof e}isBool(e){return"boolean"==typeof e}isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}isSelectorID(e){return 0===(e+"").trim().indexOf("#")}isPlainObject(e){return"Object"===e.constructor.name}isObject(e){return"object"==typeof e}isArray(e){return Array.isArray(e)}isFunction(e){return"function"==typeof e}isElement(e){return e instanceof HTMLElement}isNode(e){return e instanceof Node||e instanceof DocumentFragment}isHtml(e){return-1!==(e+"").trim().indexOf("<")}isEmpty(e){return void 0===e||this.isObject(e)&&0===Object.keys(e).length||""===e}isVisible(e){if(!this.isElement(e))return console.log("(isVisible) Not an element: "),console.log(e),!1;const t="none"!==e.style.display,s="hidden"!==e.style.visibility;return t&&s}inView(e){const t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.width>0&&t.height>0}cleanArray(e){return e.filter((function(e){return 0===e||e}))}isValidElement(e){const t=this.newElement(e);return"template"!==e&&"HTMLUnknownElement"!==t.constructor.name}exists(e){return null!==document.querySelector(e)}getAttrOrProp(e,t){let s="";return this.hasAttrOrProp(e,t)&&(s=this.hasAttr(e,t)?e.getAttribute(t):e[t]),s}hasAttrOrProp(e,t){return this.hasAttr(e,t)||this.hasProp(e,t)}hasAttr(e,t){let s=!1;if(e&&!this.isNumeric(t))if("checked"===t)s=void 0!==e.type&&("radio"===e.type||"checkbox"===e.type);else s=void 0!==e.hasAttribute&&e.hasAttribute(t);return s}hasProp(e,t){let s=!1;if(e&&!this.isNumeric(t)){let n=void 0!==e[t];n&&null===e[t]&&"value"===t&&(n=!1),s=n&&!(e[t]instanceof Node)&&!e.hasAttribute(t)}return s}setPropOrAttr(e,t,s){if(this.hasProp(e,t))try{e[t]=s}catch(n){this.setAttr(e,t,s)}else this.setAttr(e,t,s)}setAttr(e,t,s){s?e.setAttribute(t,s):e.removeAttribute(t)}defineProp(e,t,s){this.isObject(e)&&void 0===e[t]&&(Object.defineProperty(e,t,{enumerable:!1,writable:!0}),e[t]=s)}htmlElement(e){const t=this.newElement("template");return t.innerHTML=e.trim(),t.content.firstChild}newElement(e){return document.createElement(e)}newEmptyNode(){return new DocumentFragment}getMethods(e){const t=Reflect.getPrototypeOf(e),s=Reflect.getPrototypeOf(t);return Reflect.ownKeys(t).filter((e=>Reflect.ownKeys(s).indexOf(e)<0))}appendAllChild(e,t){for(;e.firstChild;)t.append(e.firstChild)}prependAllChild(e,t){for(;e.firstChild;)t.prepend(e.firstChild)}}class t{"use strict";_stored={events:[],datasetNodes:[],datasets:[],styleNodes:[],styles:[]};static storedEventsTimeout=50;static short=!0;static updates=!0;static utils=new e;constructor(){}static instance=new t;static extensions={};static main=(()=>{const e=(e,s)=>{const n=this.instance.getProxyNode(e,s);return n&&n.onready&&t.utils.isFunction(n.onready)&&(n.addEventListener("ready",n.onready,{once:!0}),setTimeout((()=>{n.dispatchEvent(new CustomEvent("ready"))}),10)),["dataset","style"].forEach((e=>{n&&n[e]&&(this.instance._stored[e+"s"].push(n[e]),this.instance._stored[e+"Nodes"].push(n))})),n};return t.utils.getMethods(t.utils).forEach((s=>{e[s]=t.utils[s]})),e})();static ready(e){document.addEventListener("DOMContentLoaded",(()=>{e(t.main)}))}static load(e){if(void 0!==e){const s=e(t.main);t.utils.isObject(s)&&!t.utils.isEmpty(s)&&Object.keys(s).forEach((e=>{if(t.utils.isValidElement(e)){void 0===t.extensions[e]&&(t.extensions[e]={});const n=t.utils.newElement(e);Object.keys(s[e]).forEach((s=>{t.utils.hasProp(n,s)&&console.log("Warning: property ["+s+"] already exists in node: ["+e+"] while trying to extend it. Unexpected behaviour may happen.")})),Object.assign(t.extensions[e],s[e])}else{void 0===t.extensions["*"]&&(t.extensions["*"]={});const n=t.utils.newElement("div");Object.keys(s[e]).forEach((e=>{t.utils.hasProp(n,e)&&console.log("Warning: property ["+e+"] already exists in Node while trying to extend it. Unexpected behaviour may happen.")})),Object.assign(t.extensions["*"],s[e])}}))}return t.main}extDom(e,s){if(!e)return console.error("Selector was empty"),null;void 0===s&&(s=document);const n=t.utils.isNode(e)?e:s.querySelector(e);if(!n)return t.utils.isString(e)?(console.error("Selector: "+e+" didn't match any element in node:"),console.log(s)):console.error("Node was null"),null;if(void 0===n._m2d2){n._m2d2=!0,["parent","sibling","next","prev","find","findAll","onupdate","onready","show","onshow","inView","css","text","html","getData","index"].forEach((e=>{n.hasOwnProperty(e)&&(console.log("Node already had ["+e+"] property. It might cause unexpected behaviour."),console.log("You may need to update the M2D2 version or report it to: github.com/intellisrc/m2d2/"))})),Object.defineProperty(n,"text",{get(){return this.childNodes.length?this.innerText:this.textContent},set(e){if(this.childNodes.length){let t=!1;this.childNodes.forEach((s=>{"Text"===s.constructor.name&&(s.nodeValue=e,t=!0)})),t||this.prepend(document.createTextNode(e))}else this.textContent=e}}),Object.defineProperty(n,"html",{get(){return this.innerHTML},set(e){this.innerHTML=e}}),Object.defineProperty(n,"css",{get(){return this.classList},set(e){t.utils.isArray(e)?this.className=e.join(" "):t.utils.isString(e)?this.className=e:t.utils.isPlainObject(e)?Object.keys(e).forEach((t=>{e[t]?this.classList.add(t):this.classList.remove(t)})):console.error("Trying to assign a wrong value to css : "+e)}}),Object.defineProperty(n,"show",{get(){return t.utils.isVisible(this)},set(e){const s=()=>getComputedStyle(this,null).display,n=()=>{const e=document.getElementsByTagName("body")[0],t=document.createElement("template"),s=document.createElement(this.tagName);t.append(s),e.append(t);const n=getComputedStyle(s,null).display;return t.remove(),n};if(e){if("none"===s()){if(this._m2d2_display)this.style.display=this._m2d2_display;else if(this.style.removeProperty("display"),"none"===s()){const e=n();this.style.display=this.dataset.display||("none"!==e?e:"block")}void 0!==this.onshow&&t.utils.isFunction(this.onshow)&&this.onshow(this)}}else{const e="none"!==this.style.display?this.style.display:s();"none"!==e&&(this._m2d2_display=e),this.style.display="none"}}});let e={};return void 0!==t.extensions["*"]&&Object.assign(e,t.extensions["*"]),void 0!==t.extensions[n.tagName]&&Object.assign(e,t.extensions[n.tagName]),Object.assign(n,{inView:()=>t.utils.inView(n),next:()=>n.nextElementSibling,prev:()=>n.previousElementSibling,parent:()=>this.extDom(n.parentElement),sibling:e=>n.parentElement.find(e),find:e=>{const t=n.querySelector(e);return t?this.extDom(t):null},findAll:e=>{const t=void 0===e?Array.from(n.children):n.querySelectorAll(e);return t.forEach((e=>{this.extDom(e)})),t}},e),void 0===n.index&&(n.index=()=>Array.from(n.parentNode.children).indexOf(n)),["INPUT","TEXTAREA","SELECT"].indexOf(n.tagName)>=0&&t.utils.hasAttrOrProp(n,"value")&&(n.oninput=function(){this.setAttribute("value",this.value)}),"FORM"===n.tagName&&(n.getData=function(e){const t={},s=new FormData(this),o=e||!1;for(let e of s.entries()){const s=n.find("[name='"+e[0]+"']");(o||"hidden"===s.type||s.show)&&(t[e[0]]="file"===s.type?s.files:e[1])}return t}),n}return n}doDom(e,s){if(t.utils.isObject(e)&&void 0===s&&(s=e,e=t.utils.newEmptyNode(),void 0===s.warn&&(s.warn=!1)),!(t.utils.isString(e)||t.utils.isElement(e)||t.utils.isNode(e)))return console.error("Selector is not a string or a Node:"),console.log(e),null;if(t.utils.isString(e)&&!document.querySelector(e))return console.log("Selected element doesn't exists: "+e),null;const n=this.extDom(e);if(void 0===s)return n;if(s=this.plainToObject(n,s),Object.keys(s).filter((e=>!["tagName"].includes(e))).forEach((e=>{let o=s[e];null==o&&(console.log("Value was not set for key: "+e+", 'empty' was used in object: "),console.log(s),console.log("In node:"),console.log(n),o="");let i=this.updateValue(n,e,o),a=t.utils.hasProp(n,e),r=!1;if(t.utils.hasAttr(n,e)||a)switch(!0){case"value"===e&&t.utils.hasProp(n,"valueAsDate")&&i instanceof Date:e="valueAsDate";case"css"===e:case typeof i==typeof n[e]:case t.utils.isString(n[e])&&t.utils.isNumeric(i):case t.utils.isFunction(i)&&t.utils.isObject(n[e]):case t.utils.isBool(i)&&t.utils.isString(n[e]):case"object"==typeof n[e]&&"INPUT"===n.tagName:r=!0}if(r){let s=!1;switch(e){case"classList":t.utils.isArray(i)?i.forEach((t=>{n[e].add(t)})):t.utils.isString(i)?n[e].add(i):s=!0;break;case"style":case"dataset":t.utils.isPlainObject(i)?Object.keys(i).forEach((t=>{n[e][t]=this.updateValue(n[e],t,i[t])})):s=!0;break;default:switch(!0){case t.utils.isBool(i):case t.utils.hasAttrOrProp(n,e):t.utils.setPropOrAttr(n,e,i);break;default:n[e]=i}}s&&(console.error("Invalid value passed to '"+e+"': "),console.log(i),console.log("Into Node:"),console.log(n))}else{const a=[];try{if("template"!==e&&!t.utils.isFunction(i)){if(e&&e.match(/^\w/)){let t=n.find("#"+e);t&&-1===a.indexOf(t)&&a.push(t),t=n.find("[name='"+e+"']"),t&&-1===a.indexOf(t)&&a.push(t);const s=Array.from(n.findAll("."+e)).filter((e=>a.indexOf(e)<0));s.length>0&&s.forEach((e=>a.push(e)))}const t=Array.from(n.findAll(e)).filter((e=>a.indexOf(e)<0));t.length>0&&t.forEach((e=>a.push(e)))}}catch(t){return console.error("Invalid selector: "+e),void console.log(t)}if(a.length>1){const t=[];a.forEach((s=>{t.push(this.render(s,e,i))})),this.linkNode(n,e,t),void 0!==i.warn&&!1===i.warn||(console.log("Multiple elements were assigned with key: ["+e+"] under node: "),console.log(n),console.log("It might be what we expect, but if it is not expected it could result on some elements mistakenly rendered. You can specify 'warn : false' under that element to hide this message."))}else if(1===a.length){const r=a[0];if(t.utils.isElement(r)){const a=this.plainToObject(r,i),l=t.utils.isPlainObject(a)&&Object.keys(a).length>=1?Object.keys(a)[0]:null;if(l&&(i=this.updateValue(r,l,o)),t.utils.isArray(i)){const t=s.template;this.doItems(r,i,t),this.linkNode(n,e,r)}else this.renderAndLink(n,r,e,i)}else console.error("BUG: It should have been a node but got: "),console.log(r),console.log("Parent node:"),console.log(n)}else if(0===a.length){"template"===e&&void 0===s.items&&(e="items",i=[]);const o=t.utils.isFunction(i);if(void 0!==i.tagName){const t=this.appendElement(n,i.tagName);this.renderAndLink(n,t,e,i)}else if(t.utils.isValidElement(e)&&!o){const t=this.appendElement(n,e);this.renderAndLink(n,t,e,i)}else if("items"===e){const e=s.template;if(t.utils.isPlainObject(i)){const e=[];Object.keys(i).forEach((s=>{let o;"DL"===n.tagName?o={dt:s,dd:i[s]}:(o={text:i[s]},t.utils.hasAttrOrProp(n,"value")?o.value=s:o.dataset={id:s}),e.push(o)})),i=e}t.utils.isArray(i)?this.doItems(n,i,e):(console.log("Warning: 'items' specified but value is not and array, in element: "),console.log(n),console.log("Passed values are: "),console.log(i))}else o?(t.updates&&"onupdate"===e&&n.addEventListener("update",i,!0),n[e]=i):"template"!==e&&"warn"!==e&&!1!==i&&(void 0!==s.warn&&!1===s.warn||(console.error("Not sure what you want to do with key: "+e+" under element: "),console.log(n),console.log("And object:"),console.log(s),console.log("Most likely the element's property or child no longer exists or the value passed to it is incorrect."),console.log("You can set 'warn : false' property to the element to dismiss this message.")),n[e]=i)}}})),n.onload){const e=["BODY","FRAME","IFRAME","IMG","LINK","SCRIPT","STYLE"].indexOf(n.tagName)>=0,t="INPUT"===n.tagName&&"image"===n.type;e||t||n.dispatchEvent(new CustomEvent("load"))}return n}isUpdateLink(e){let s=!1;if(t.utils.isArray(e)&&(2===e.length||3===e.length)){const n=2===e.length,o=t.utils.isNode(e[0])||e[0]instanceof DOMStringMap||e[0]instanceof CSSStyleDeclaration,i=n?t.utils.isString(e[1]):t.utils.isString(e[1])&&t.utils.isFunction(e[2]);s=o&&i,s&&n&&e.push((e=>e))}return s}plainToObject(e,s){if(!t.utils.isPlainObject(s)&&!t.utils.isFunction(s)&&!t.utils.isElement(s))if(t.utils.isHtml(s))s={html:s};else if(this.isUpdateLink(s)){const n=s[0],o=s[1],i=s[2];let a=this.plainToObject(e,i(n[o]));if(t.utils.isPlainObject(a)){const e={};Object.keys(a).forEach((t=>{e[t]=s})),s=e}}else t.utils.isArray(s)?s={items:s}:t.utils.hasAttrOrProp(e,"value")?s="SELECT"===e.tagName?{value:s,text:s}:"BUTTON"===e.tagName?{text:s}:{value:s}:t.utils.isString(s)&&"IMG"===e.tagName?s={src:s}:(t.utils.isString(s)||t.utils.isNumeric(s))&&(s={text:s});return s}renderAndLink(e,t,s,n){const o=this.render(t,s,n);this.linkNode(e,s,o)}render(e,t,s){return s=this.plainToObject(e,s),this.doDom(e,s)}linkNode(e,s,n){if(e[s]===n){const t=this.proxy(n);try{e[s]=t}catch(e){}e["$"+s]=t}else t.utils.hasAttrOrProp(e,s)?(e["$"+s]=n,console.log("Property : "+s+" existed in node: "+e.tagName+". Using $"+s+" instead for node: "+n.tagName+".")):e[s]=this.proxy(n)}appendElement(e,s){const n=t.utils.newElement(s);return e.append(n),n}getItem(e,t,s,n){n||(n=this.getTemplate(e));const o=n.cloneNode(!0);this.addTemplatesToItem(n,o),o.dataset.id=t,this.setUniqueAttrib(o,"selected");let i=this.doDom(o,s);return this.getItemWithEvents(e,i)}addTemplatesToItem(e,t){["_template","__template"].forEach((s=>{void 0!==e[s]&&(t[s]=e[s])}))}getItemWithEvents(e,s){if(void 0!==e.__template){const n=(e,s)=>(s=s||{},Object.keys(e).forEach((o=>{t.utils.isPlainObject(e[o])?s[o]=n(e[o]):t.utils.isFunction(e[o])&&(s[o]=e[o])})),s);let o=n(e.__template);t.utils.isEmpty(o)||(o=o[Object.keys(o)[0]],s=this.doDom(s,o))}return s}doItems(e,t,s){const n=this.getTemplate(e,s);if(void 0===n)return console.error("Template not found. Probably an array is being used where it is not expected. Node:"),console.log(e),console.log("Value (mistaken?):"),void console.log(t);let o=0;t.forEach((t=>{t=this.plainToObject(e,t);const s=this.getItem(e,o++,t,n);s&&e.append(s)}));const i=e.find("template");i&&e.removeChild(i),e.items=e.children,this.extendItems(e)}getTemplate(e,s){if(void 0!==e._template&&""!==e._template)return e._template;{let n;const o=e.querySelector("template");if(o)n=t.utils.htmlElement(o.innerHTML.trim());else switch(e.tagName){case"SELECT":case"DATALIST":n=t.utils.newElement("option");break;case"UL":case"OL":n=t.utils.newElement("li");break;case"NAV":n=t.utils.newElement("a");break;case"DL":n=t.utils.newElement("dd");break;default:if(s){const o=Object.keys(s).length;if(o){if(o>1)if(void 0!==s.tagName){let e={};e[s.tagName]=s,s=e}else console.log("Template has more than one top elements. Using the first one. In: "),console.log(s),console.log("Node: "),console.log(e);const i=Object.keys(s)[0],a=s[i];t.utils.isValidElement(i)?n=t.utils.newElement(i):void 0!==a.tagName?(n=t.utils.newElement(a.tagName),s[a.tagName]=a,delete s[i]):(console.error("Template defined an element which can not be identified: ["+i+"], using <span> in:"),console.log(s),console.log("Node: "),console.log(e),n=t.utils.newElement("span"))}else console.error("Template has no definition, and it can not be guessed. Using <span>. Template: "),console.log(s),console.log("Node: "),console.log(e),n=t.utils.newElement("span")}else e.childElementCount>0&&(n=t.utils.htmlElement(e.innerHTML.trim()))}if(s)if(t.utils.isPlainObject(s)){const o=t.utils.newEmptyNode();o.append(n);n=this.doDom(o,s).children[0],t.utils.defineProp(e,"__template",s)}else n=t.utils.isHtml(s)?t.utils.htmlElement(s):t.utils.isSelectorID(s)?t.utils.htmlElement(document.querySelector(s).innerHTML):t.utils.newElement(s);if(n.childrenElementCount>1){console.log("Templates only supports a single child. Multiple children were detected, wrapping them with <span>. Template:"),console.log(n);const e=t.utils.newElement("span");e.append(n),n=e}return n&&t.utils.defineProp(e,"_template",n),n}}setUniqueAttrib(e,s){e.hasOwnProperty(s)||Object.defineProperty(e,s,{get:function(){return this.hasAttribute(s)},set:function(e){const n=this.parentNode?this.parentNode.find("["+s+"]"):null;n&&n.removeAttribute(s),t.utils.setAttr(this,s,e)}})}updateValue(e,s,n){if(this.isUpdateLink(n)){const o=this,i=n[0],a=n[1],r=n[2];if(n=i[a],i instanceof CSSStyleDeclaration&&this._stored.styles.includes(i)){const n=this._stored.styleNodes[this._stored.styles.indexOf(i)];t.updates&&(n.onupdate=function(t){t.detail&&"style"===t.detail.property&&t.detail.newValue.startsWith(a+":")&&o.setShortValue(e,s,r(this.style[a]))})}else if(i instanceof DOMStringMap&&this._stored.datasets.includes(i)){const n=this._stored.datasetNodes[this._stored.datasets.indexOf(i)];t.updates&&(n.onupdate=t=>{t.detail&&t.detail.property==="data-"+a&&o.setShortValue(e,s,r(t.detail.newValue))})}else t.updates&&(i.onupdate=n=>{n.detail&&n.detail.property===a&&(t.utils.isObject(e[s])||o.setShortValue(e,s,r(n.detail.newValue)))})}return n}setShortValue(e,s,n){if(t.utils.isNode(e[s]))if(t.short){const o=this.plainToObject(e[s],n),i=t.utils.isPlainObject(o)&&Object.keys(o).length>=1?Object.keys(o)[0]:null;i&&(e[s][i]=n)}else console.log("Short is disabled. Trying to set a value ("+n+") in a node:"),console.log(e[s]),console.log("Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'");else e[s]=n}getShortValue(e,s,n){let o=null;if(t.utils.isNode(e[s]))if(t.short){const i=this.plainToObject(e[s],n||""),a=t.utils.isPlainObject(i)&&Object.keys(i).length>=1?Object.keys(i)[0]:null;a&&(o=e[s][a])}else console.log("Short is disabled. Trying to get a value from node:"),console.log(e[s]),console.log("Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'");else o=e[s];return o}proxy(e,s){if(!t.short||null===e||void 0!==e._proxy&&void 0===s)return e;e._proxy=e;return new Proxy(e,{get:(e,s)=>{const n=e[s];switch(!0){case null==n:return null;case t.utils.isFunction(n):return n.bind(e);case n._proxy&&void 0!==e["$"+s]:return e["$"+s];case void 0===n._proxy&&t.utils.isElement(n):return this.proxy(n);default:return n}},set:(e,s,n)=>{let o="";return t.utils.isElement(e[s])?(o=this.getShortValue(e,s,n),this.setShortValue(e,s,n)):"onupdate"===s?t.updates?t.utils.isFunction(n)?(e.addEventListener("update",n,!0),o=e[s],e[s]=n):(console.error("Value passed to 'onupdate' is incorrect, in node:"),console.log(e),console.log("Value: (not a function)"),console.log(n)):(console.log("Updates are not available when `m2d2.updates == false`:"),console.log(e)):"items"===s?(e.items.clear(),this.doItems(e,n)):(o=e[s],n=this.updateValue(e,s,n),e[s]=n),t.updates&&void 0!==e.onupdate&&n!==o&&e.dispatchEvent(new CustomEvent("update",{detail:{type:typeof n,property:s,newValue:n,oldValue:o}})),!0}})}onObserve(e,s){e.forEach((e=>{const s=e.target;if(!(this._stored.events.indexOf(e)>=0)&&(this._stored.events.push(e),setTimeout((()=>{const t=this._stored.events.indexOf(e);t>=0&&this._stored.events.splice(t,1)}),t.storedEventsTimeout),void 0!==s.onupdate))if("attributes"===e.type){const n=t.utils.getAttrOrProp(s,e.attributeName);n!==e.oldValue&&s.dispatchEvent(new CustomEvent("update",{detail:{type:typeof n,property:e.attributeName,newValue:n,oldValue:e.oldValue}}))}else if("childList"===e.type){if("#text"===(e.addedNodes[0]||e.removedNodes[0]).nodeName){const t=e.addedNodes[0].textContent,n=e.removedNodes.length?e.removedNodes[0].textContent:null;t!==n&&s.dispatchEvent(new CustomEvent("update",{detail:{type:typeof t,property:"text",newValue:t,oldValue:n}}))}else if(void 0!==s.items){const t=e.addedNodes,n=e.removedNodes;t!==n&&s.dispatchEvent(new CustomEvent("update",{detail:{type:typeof t,property:"items",newValue:t,oldValue:n}}))}}}))}observe(e){if(t.updates){const t=new MutationObserver(this.onObserve.bind(this)),s={attributeOldValue:!0,subtree:!0,childList:!0},n=e._proxy||e;t.observe(n,s)}}getProxyNode(e,t){const s=this.doDom(e,t);if(s)return this.observe(s),this.proxy(s)}extendItems(e){function s(t){t.forEach((t=>{const s=t.parentNode.removeChild(t);e.append(s)}))}const n=e.items;Object.getOwnPropertyNames(Array.prototype).concat(["clear","get","remove","selected","first","last","findAll"]).forEach((o=>{if(void 0===n[o]){let i=null;const a=this;switch(o){case"copyWithin":case"fill":case"splice":i=function(){console.log("Not available yet: "+o)};break;case"reverse":i=function(...e){if(this.items.length){const t=Array.from(this.items),n=t[o](...e);return s(t),n}};break;case"clear":i=function(){for(;this.items[0];)this.items[0].remove()};break;case"get":i=function(e){let s=null;return this.items.length&&this.items.some((n=>{const o=t.utils.isNumeric(e)?1*n.dataset.id==1*e:n.dataset.id===e;if(n.dataset&&o)return s=n,!0})),s};break;case"selected":i=function(){return a.proxy(this.find(":scope > [selected]"))};break;case"first":i=function(){return a.proxy(this.items[0])};break;case"last":i=function(){return a.proxy(this.items[this.items.length-1])};break;case"pop":i=function(){if(this.items.length){const e=this[0].parentNode;return a.proxy(e.removeChild(this.items[this.items.length-1]))}};break;case"push":i=function(e){if(e=a.plainToObject(this,e),t.utils.isElement(e))this.append(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=a.getItem(this,t,e);this.appendChild(s)}else console.log("Trying to push an unknown value into a list:"),console.log(e)};break;case"remove":i=function(e){if(this.items.length){const t=this.items.get(e);1===t.length&&t.remove()}};break;case"shift":i=function(){if(this.items.length){const e=this.items[0].parentNode;return a.proxy(e.removeChild(this.items[0]))}};break;case"sort":i=function(e){if(this.items.length){const t=Array.from(this.items);t.sort(e||((e,t)=>e.text.localeCompare(t.text))),s(t)}};break;case"unshift":i=function(e){if(e=a.plainToObject(this,e),t.utils.isElement(e))this.prepend(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=a.getItem(this,t,e);this.prepend(s)}else console.log("Trying to unshift an unknown value into a list:"),console.log(e)};break;default:let n=o;switch(!0){case"findAll"===o:n="filter";case t.utils.isFunction(Array.prototype[o]):const s=function(...t){const s=[];return Array.from(e.items).forEach((e=>{s.push(a.proxy(e))})),Array.from(s)[n](...t)};switch(o){case"find":i=function(...e){return t.utils.isString(e[0])?this.find(e[0]):s(...e)};break;case"findAll":i=function(...e){return 0===e.length?this.findAll():t.utils.isString(e[0])?this.findAll(e[0]):s(...e)};break;case"concat":i=function(...e){for(let s=0;s<e.length;s++)if(t.utils.isArray(e[s]))for(let n=0;n<e[s].length;n++){let o=e[s][n];if(!t.utils.isElement(o)&&(o=a.plainToObject(this,e[s][n]),t.utils.isPlainObject(o))){const e=this.items.length;o=a.getItem(this,e,o)}this.items.push(o)}};break;default:i=s}}}i&&t.utils.defineProp(n,o,i.bind(e))}}))}}return t.load((e=>{function t(t){if(e.exists("#m2d2-alert .m2d2-alert-front")){e("#m2d2-alert .m2d2-alert-front").css.add("vanish"),setTimeout((()=>{e.exists("#m2d2-alert .m2d2-alert-front")&&e("#m2d2-alert").remove(),t&&t()}),400)}else t&&t()}const s={wrap:!1,question:["fa","fa-question-circle"],info:["fa","fa-exclamation-circle"],error:["fa","fa-exclamation-triangle"],ok:["fa","fa-check"],input:["fa","fa-edit"],wait:["fa","fa-cog","fa-spin"]},n={wrap:"material-icons",question:"help",info:"info",error:"error",ok:"done",input:"edit",wait:"pending"},o={wrap:!1,question:"icon_question",info:"icon_info",error:"icon_error",ok:"icon_ok",input:"icon_input",wait:"icon_wait"};e.message=function(i){let a=o;switch(e.messageIcons){case"fa":a=s;break;case"material":a=n;break;default:e.isObject(e.messageIcons)&&(a=e.messageIcons)}i&&(e.isFunction(i.callback)||(i.callback&&!i.text&&(i.text=i.callback),i.callback=()=>{}),i.text||(i.text="")),t((()=>{e("body",{m2d2Alert:{tagName:"div",id:"m2d2-alert",back:{tagName:"div",css:"m2d2-alert-back",style:{position:"absolute",left:0,right:0,top:0,bottom:0,backgroundColor:"#0005",display:"flex",justifyContent:"center",alignItems:"center"},front:Object.assign({tagName:"form",css:(i.css?e.isArray(i.css)?i.css:[i.css]:[]).concat(["m2d2-alert-front","popup",i.icon]),style:{zIndex:100},icon:{tagName:"span",css:["icon",i.icon].concat(a.wrap?[a.wrap]:a[i.icon]).concat("wait"===i.icon?"spin":""),text:a.wrap?a[i.icon]:""},message:{tagName:"div",css:"m2d2-alert-title",span:i.title},submsg:(()=>{let t;return t="input"!==i.icon||i.text?e.isPlainObject(i.text)?{fieldset:Object.assign({css:"m2d2-alert-field"},i.text)}:{span:i.text.replace("\n","<br>")}:{fieldset:{css:"m2d2-alert-field",input:{type:"text",name:"answer",onload:function(){this.focus()}}}},Object.assign({tagName:"div",css:"m2d2-alert-text"},t)})(i.icon),onsubmit:function(){const e=this.getData();let s;switch(e.button){case"ok":case"yes":s=()=>{i.callback(!0,e)};break;case"no":s=()=>{i.callback(!1,e)};break;case"cancel":s=()=>{i.callback(null,e)};break;case"send":s=1===Object.keys(e).length?()=>{i.callback(e[Object.keys(e)[0]],e)}:2===Object.keys(e).length?()=>{i.callback(e[Object.keys(e).find((e=>"button"!==e))],e)}:()=>{i.callback(e,e)};break;default:s=()=>{i.callback(e,e)}}return t(s),!1},onload:function(){const e=this.find("[autofocus]");e&&e.focus()}},function(t){let s={};return t.length&&(s={buttons:{tagName:"div",css:"m2d2-alert-buttons"}},t.forEach((t=>{const n=t.toLowerCase().replace(/[^a-z ]/g,"").replace(" ","_");s.buttons[n]={tagName:"button",type:"submit",value:n,css:["color",n],text:void 0!==e.dict?e.dict(t):t,autofocus:["ok","yes"].includes(t),formNoValidate:["cancel"].includes(t),onclick:function(){e(this.closest("form"),{hide:{tagName:"input",type:"hidden",name:"button",value:this.value}})}}}))),s}(i.buttons))}}})}));let r=1;return e("#m2d2-alert .m2d2-alert-front").findAll("input, select, textarea").forEach((e=>{""===e.name&&(e.name="field_"+r++)})),{close:t}},e.wait=(t,s,n)=>e.message({icon:"wait",title:t,buttons:[],text:void 0===n?null:s,callback:void 0===n?s:n}),e.alert=(t,s,n)=>e.message({icon:"info",title:t,buttons:["ok"],text:void 0===n?null:s,callback:void 0===n?s:n}),e.success=(t,s,n)=>e.message({icon:"ok",title:t,buttons:["ok"],text:void 0===n?null:s,callback:void 0===n?s:n}),e.failure=(t,s,n)=>e.message({icon:"error",title:t,buttons:["ok"],text:void 0===n?null:s,callback:void 0===n?s:n}),e.confirm=(t,s,n)=>e.message({icon:"question",title:t,buttons:["yes","no"],text:void 0===n?null:s,callback:void 0===n?s:n}),e.prompt=(t,s,n)=>e.message({icon:"input",title:t,buttons:["cancel","send"],text:void 0===n?null:s,callback:void 0===n?s:n}),e.closeAll=()=>{t()}})),t.load((e=>{let t=localStorage.getItem("m2d2.lang")||""||navigator.language;e.dict=new function(t){const s=function(e,t){if(void 0===e)return"";let n=s.val(e,!0);if(void 0!==t){if("string"==typeof t&&""!==t){const e=(t=t.replace(/;$/,"")).split(";");t={},e.forEach((s=>{const n=e[s].split(":");t[n[0]]=n[1]}))}"object"==typeof t&&t.forEach((e=>{let o=t[e]+"";o=s.val(o,!1),n=n.replace(e,o)}))}return n};return s.lang=t||"en",s.data={},s.set=function(e){return this.data=e,this},s.has=function(e,t){return void 0===t?void 0!==this.data[e]:void 0!==this.data[e][t]},s.val=function(t,n){if(e.isEmpty(s.data))return console.error("Dictionary is empty. You need to add a dictionary, for example: `$.dict.set({\nsave   : { en : 'Save', es : 'Guardar' },\ncancel : { en : 'Cancel', es : 'Cancelar' }\nyes    : { en : 'Yes', es : 'Si' },\nno     : { en : 'No', es : 'No' }\n})`"),"";if(!t)return console.error("No keyword specified."),"";let o=t;if(void 0===n&&(n=!1),t=t.toLowerCase(),this.has(t)){const e=this.lang.split("-")[0];this.has(t,this.lang)?o=this.data[t][this.lang]:this.has(t,e)?o=this.data[t][e]:n&&console.log("Missing translation for lang ["+this.lang+"]: "+t)}else n&&console.log("Missing keyword: "+t);return o},s}(t);const s=[];e.lang=function(t){t&&(e.dict.lang=t,localStorage.setItem("m2d2.lang",e.dict.lang)),e("body").findAll("[lang]").forEach((t=>{let s=t.text;if(s&&!t.classList.contains("notxt")){void 0===t.dataset.kw&&(t.dataset.kw=e.lang.getKeyword(s)),t.text=e.dict(t.dataset.kw);const n=t.dataset.kw+"_title";let o=e.dict.has(n)?e.dict(n):"";o&&(t.title=o)}else if(t.title){let s="";t.dataset.kw||(t.dataset.kw=e.lang.getKeyword(t.title)),s=e.dict(t.dataset.kw),s&&(t.title=s)}else if(t.placeholder){let s="";t.dataset.kw||(t.dataset.kw=e.lang.getKeyword(t.placeholder)),s=e.dict(t.dataset.kw),s&&(t.placeholder=s)}else if(t.value){let s="";t.dataset.kw||(t.dataset.kw=e.lang.getKeyword(t.value)),s=e.dict(t.dataset.kw),s&&(t.value=s)}})),s.forEach((e=>{e(t)}))},e.lang.getKeyword=function(e){return e.toLowerCase().trim().replace(/ /g,"_").replace(/[^\w]/g,"").replace(/_$/,"")},Object.defineProperty(e.lang,"onchange",{get(){return this},set(t){e.isFunction(t)?s.push(t):(console.log("Unable to set lang.onchange, because it is not a function: "),console.log(t))}})})),t.ready((e=>{const t=localStorage.getItem("m2d2.lang")||"",s=e("body").find("[lang]"),n=e("html").lang||(s?s.lang:null)||"en";(t?n!==t:n!==navigator.language.split("-")[0])&&e.lang()})),t.load((e=>{function t(e){switch(e){case"local":window.localStorage&&(this.store=localStorage);break;case"session":window.sessionStorage&&(this.store=sessionStorage)}null==this.store&&(this.store=localStorage),this.set=function(e,t){"string"==typeof t&&(t={$:t}),this.store.setItem(e,JSON.stringify(t))},this.get=function(e){let t;try{t=JSON.parse(this.store.getItem(e))||{}}catch(s){t=this.store.getItem(e)}return void 0!==t.$?t=t.$:0===Object.keys(t).length&&t.constructor===Object&&(t=null),t},this.del=function(e){this.store.removeItem(e)},this.keys=function(){return Object.keys(this.store).sort()},this.clear=function(){this.store.clear()},this.exists=function(e){return this.store.hasOwnProperty(e)},this.log=function(e,t,s){null==s&&(s=10);const n=this.get(e)||[];for(n.push(t);n.length>s;)n.shift();this.set(e,n)}}e.local=new t("local"),e.session=new t("session")})),t.load((e=>{function t(e,t,s){const n=[];return e=e||{},t.forEach((o=>{const i="Array"==typeof e?e.length==t.length?e[s]:e:void 0!==e[o.name]?e[o.name]:e;n.push({file:o,data:i,index:s++})})),n}function s(e,t,s,n,o){const i=new XMLHttpRequest;t=Array.from(t),i.upload.addEventListener("progress",(function(e){if(e.lengthComputable)if(n.oneByOne){const o=Math.round(100*e.loaded/e.total);n.onUpdate(o,t[0],s)}else{let s=0,o=0;t.some((t=>{s+=t.size;const i=e.loaded>=s?100:100-Math.round(100*(s-e.loaded)/t.size);return n.onUpdate(i,t,o++),s>=e.loaded}))}}),!1),i.addEventListener("load",(function(e){let a={};try{a=i.responseText?JSON.parse(i.responseText):{error:{type:"Unknown",reason:"Unknown Error"}}}catch(e){a.error={type:"Parse Error",reason:e.message}}i.status>=200&&i.status<400?o(n.onResponse(a),t,s):("string"==typeof a.error&&(a.error={type:"Exception",reason:a.error}),n.onError(a.error))}),!1),i.open("POST",n.upload);const a=Array(t.length).fill(!1),r=function(e,t){const s=new FormData;return t.forEach((t=>{s.append(e,t,t.name)})),s}(e,t);let l=0;t.forEach((e=>{const t=new FileReader;t.onload=function(e){a[l++]=!0,-1===a.indexOf(!1)&&i.send(r)},t.readAsBinaryString(e)}))}e.upload=function(e,n){const o=Object.assign({},{accept:"*/*",parallel:!1,field:"file",multiple:!0,maxFiles:0,maxSizeMb:0},n);n=null;let i=window._protected_reference=document.createElement("INPUT");i.name=o.field,i.type="file",1==o.multiple&&(i.multiple="multiple"),o.upload||(console.log("Upload not specified. Using current page."),o.upload=""),null==o.onDone&&(o.onDone=(e,t)=>{console.log(e)}),null==o.onError&&(o.onError=e=>{console.log("Error : "),console.log(e)}),null==o.onUpdate&&(o.onUpdate=(e,t,s)=>{console.log("Uploading : "+e+"% "+(o.oneByOne?"[ "+t.name+" ]":""))}),null==o.onResponse&&(o.onResponse=e=>e),i.addEventListener("change",(()=>{if(i.files.length){if(!(0===o.maxFiles|i.files.length<=o.maxFiles))return o.onError("Max file limit exceeded. Maximum files: "+o.maxFiles),!1;if(o.onSelect){const e=[];let t=0;Array.from(i.files).forEach((s=>{e.push(URL.createObjectURL(s)),t+=s.size}));const s=t/1048576;if(o.maxSizeMb&&s>o.maxSizeMb)return o.onError("Maximum size exceeded: "+Math.ceil(s)+"MB > "+o.maxSizeMb+"MB"),!1;o.onSelect(i.files,e)}new Promise((e=>{if(o.oneByOne){let n=0;const a=Array(i.files.length).fill(!1);Array.from(i.files).forEach((r=>{new s(i.name,[r],n++,o,((s,n,i)=>{a[i]=!0;const r=-1===a.indexOf(!1);o.onDone(t(s,n,i),r),r&&e()}))}))}else new s(i.name,i.files,0,o,((s,n,i)=>{o.onDone(t(s,n,i),!0),e()}))})).then((()=>{i=window._protected_reference=void 0}))}})),i.click()}})),t.load((e=>{e.ws=new class{request(e){if(e)try{this.webSocket.send(JSON.stringify(e))}catch(e){this.webSocket.onerror(e)}}getSocket(e,t,s){const n=new WebSocket(this.path);return n.onopen=t,n.onclose=s,n.onmessage=t=>{if(t.data)try{e(JSON.parse(t.data))}catch(e){n.onerror(e)}},n.onerror=e=>{console.error("Socket encountered error: ",e?e.message:"Unknown","Closing socket");const t=n||this;1===t.readyState&&t.close()},n}connect(e,t){this.initRequest=e.request||null,this.onConnect=e.connected||(()=>{}),this.onDisconnect=e.disconnected||(()=>{}),this.reconnect=!1!==e.reconnect,this.host=e.host||window.location.hostname,this.secure=!0===e.secure,this.port=e.port||(this.secure?443:80),this.path="ws"+(this.secure?"s":"")+"://"+this.host+":"+this.port+"/"+(e.path||""),this.connected=!1,this.interval=null;const s=e=>{this.connected=!0,this.request(this.initRequest),this.onConnect()},n=e=>{this.connected=!1,this.onDisconnect(),!this.interval&&this.reconnect&&(this.interval=setInterval((()=>{if(this.connected)console.log("Reconnected..."),clearInterval(this.interval),this.interval=null;else try{this.webSocket.close(),console.log("Reconnecting..."),this.webSocket=this.getSocket(t,s,n)}catch(e){}}),2e3))};this.webSocket=this.getSocket(t,s,n)}disconnect(){this.reconnect=!1,this.webSocket.close()}}})),t.load((e=>{const t=function(e,t,s,n,o,i){const a=new XMLHttpRequest;if(void 0===i&&(i=!1),void 0===o&&(o=function(e){console.log(e)}),s&&0===Object.entries(s).length&&(s=""),s)if(i)s=JSON.stringify(s);else if("GET"===e.toUpperCase())t+=(-1!==t.indexOf("?")?"&":"?")+Object.keys(s).map((e=>e+"="+s[e])).join("&"),s="";else s=Object.keys(s).map((e=>e+"="+s[e])).join("&");return a.open(e,t,!0),i?a.setRequestHeader("Content-Type","application/json"):a.setRequestHeader("Content-type","application/x-www-form-urlencoded"),a.onerror=function(e){o({type:"Connection",reason:"Connection Refused"})},a.onload=function(){let e={};try{e=a.responseText?JSON.parse(a.responseText):{error:{type:"Unknown",reason:"Unknown Error"}}}catch(t){e.error={type:"Parse Error",reason:t.message}}a.status>=200&&a.status<400?void 0!==n&&n(e):void 0!==o&&("string"==typeof e.error&&(e.error={type:"Exception",reason:e.error}),o(e.error))},a.send(s),a},s={};["get","post","put","delete","connect","options","trace","patch"].forEach((function(e){s[e]=function(){let s,n,o,i,a;switch(arguments.length){case 5:"boolean"==typeof arguments[4]?a=arguments[4]:console.log("Passed JSON argument: "+arguments[4]+" is not boolean.");case 4:"function"==typeof arguments[3]?i=arguments[3]:4===arguments.length&&"boolean"==typeof arguments[3]?a=arguments[3]:console.log("Passed argument 4: "+arguments[3]+" is mistaken");case 3:"function"==typeof arguments[2]?"function"==typeof arguments[1]&&arguments.length<5?i=arguments[2]:o=arguments[2]:3===arguments.length&&"boolean"==typeof arguments[2]?a=arguments[2]:console.log("Passed argument 3: "+arguments[2]+" is mistaken");case 2:"object"==typeof arguments[1]||"string"==typeof arguments[1]?n=arguments[1]:"function"==typeof arguments[1]?o=arguments[1]:console.log("Passed argument 2: "+arguments[1]+" is mistaken");case 1:"string"==typeof arguments[0]?s=arguments[0]:Array.isArray(arguments[0])?s=arguments[0].join("/"):console.log("Passed URL: "+arguments[0]+" was not a string.");break;default:console.log("Incorrect number of arguments passed to xhr")}return void 0===n&&(n={}),t(e.toUpperCase(),s,n,o,i,a)}})),Object.assign(e,s)})),t}));class NdJsonPlayer{fps;loop;showfirst;autoplay;live;path;playing=!1;loaded=!1;backwards=!1;started=!1;onStart;onLoad;onRender;onPlay;onStop;onFinish;onError;wrapper=null;canvas=null;ctx=null;timer=null;src="";frame=0;multiplier=1;_numFrames=0;_totTime=0;_frames=[];_frameBase="";_thumbBase="";_startTimeStamp=0;constructor(e,t,s,n){const o=this;o.src=e,window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame);const i=()=>{};n=Object.assign({},n),o.onStart=n.onstart||i,o.onLoad=n.onload||i,o.onRender=n.onrender||i,o.onPlay=n.onplay||i,o.onStop=n.onstop||i,o.onFinish=n.onfinish||i,o.onError=n.onerror||(e=>{console.log(e)});let a=null;if(t instanceof Node)a=t;else{if("object"==typeof t)s=t,t="canvas";else if("string"!=typeof t)throw"Incorrect parameter passed to constructor of NdJsonPlayer";a=document.querySelector(t||"canvas")}if(!a)throw"Canvas element was not found in DOM: "+t;if("CANVAS"===a.tagName){o.canvas=a;const e=document.createElement("div");a.parentNode.insertBefore(e,a),e.prepend(a),a=e}else if(a.hasChildNodes()){if(o.canvas=a.querySelector("canvas"),!o.canvas)throw"No canvas found in element"}else o.canvas=document.createElement("CANVAS"),a.prepend(o.canvas);o.wrapper=a,o.canvas.height=o.canvas.clientHeight,o.canvas.width=o.canvas.clientWidth,a.classList.add("ndjp"),o.ctx=o.canvas.getContext("2d"),o.fps=s.fps||24,o.loop=s.loop||!1,o.live=s.live||!1,o.autoplay=s.autoplay||o.live||!1,o.showfirst=!1!==s.showfirst,o.path=s.path||"",o.timer=new TimerSrc(1e3/o.fps),o.live?new TimerSrc(1e3/o.fps,(()=>{fetch(o.src).then((e=>e.json())).then((e=>{o.reload(e)}))})).play():o.src?o.load():console.log("Initializing without source...")}_reset(){this._frames=[],this._totTime=0,this._numFrames=0,this._startTimeStamp=0,this.loaded=!1}load(e,t){const s=this;void 0!==t&&(this.src=t,this._reset());const n=new TextDecoder;let o="";return fetch(s.src).then((e=>e.body.getReader())).then((t=>t.read().then((function i({value:a,done:r}){if(r){const t=JSON.parse(o);return s.processFrame(t),e&&e(t),void s.onLoad(s)}const l=(o+n.decode(a,{stream:!0})).split(/[\r\n](?=.)/);return o=l.pop(),l.map(JSON.parse).forEach((t=>{s.processFrame(t),e&&e(t)})),t.read().then(i)})))).catch((e=>this.onError(e)))}reload(e,t){const s=this,n=[];switch(s._reset(),!0){case"string"==typeof e:n=e.split(/[\r\n](?=.)/.map(JSON.parse));break;case Array.isArray(e):n=e;break;case"Object"===e.constructor.name:n.push(e);break;default:return void console.log("Unable to reload frames. ")}n.forEach((e=>{s.processFrame(e),t&&t(e)}))}append(e){this._frames.push(e)}prepend(e){this._frames.unshift(e),this.frame++}processFrame(e){const t=this;void 0!==e.w&&(t.canvas.width=e.w),void 0!==e.h&&(t.canvas.height=e.h),void 0!==e.fb&&(t._frameBase=e.fb),void 0!==e.thb&&(t._thumbBase=e.thb),void 0!==e.tf&&(t._numFrames=e.tf),void 0!==e.tt&&(t._totTime=e.tt),void 0!==e.ts&&(t._startTimeStamp||(t._startTimeStamp=e.ts)),void 0!==e.fps&&(t.fps=e.fps,t.timer=new TimerSrc(1e3/t.fps)),void 0!==e.f?(t._frames.push(e),t.loaded||(t.loaded=!0,t.autoplay?t.play():t.showfirst&&t.step())):t.onRender(e),t.started||(t.onStart(t),t.started=!0)}_render(e){if(null==this.timer)throw"TimerSrc was not initialized";if(0===this._frames.length)throw"Video is empty or no frames were found";this.frame>=this._frames.length-1&&(this.frame=this.loop?0:this._frames.length-1),this.frame<0&&(this.frame=this.loop?this._frames.length-1:0),this._displayImg(e)}_displayImg(e){const t=this,s=t._frames[t.frame],n=function(){t.onRender(s),t.timer.call((function(){t._increment(),e||t.timer.nocall(),t._displayImg()}))};if(void 0!==s.f){const e=t._frameBase+s.f;t._image(e,n)}else t.onRender(s),n()}_increment(){this.frame+=this.multiplier*(this.backwards?-1:1),this.frame<0&&(this.loop?this.frame=this._frames.length-1:(this.frame=0,this.pause(),this.onFinish(this))),this.frame>this.totalFrames()-1&&(this.loop?this.frame=0:(this.frame=this._frames.length-1,this.pause(),this.onFinish(this)))}_draw=function(e,t){const s=this;return 0===e.width&&0===e.height?(e.onerror(),void 0!==t&&t(!1)):(s.ctx.clearRect(0,0,s.canvas.width,s.canvas.height),s.ctx.drawImage(e,0,0,e.width,e.height,0,0,s.canvas.width,s.canvas.height),void 0!==t&&t(!0)),this};_image=function(e,t){const s=this,n=new Image;return n.crossOrigin="",n.onload=function(){s._draw(n,(function(e){e&&void 0!==t&&t(n)}))},n.onerror=function(){const e=s.onError();e&&(n.src=e)},n.src="/"===e[0]||e.match(/^https?:/)||e.match(/^data:image/)?e:s.path+e,this};frameBase(){return this._frameBase}currentFrame(){return this.frame}totalFrames(){return this._numFrames||this._frames.length}totalTime(){return this._totTime||this.currentFrame()/this.fps}frameAt(e){const t=this;let s=e<this.totalFrames()?t._frames[e]:null;return s&&(s.fb=t._frameBase),s}indexAt(e){return~~(e*this.totalFrames()/100)}playerNode(){return this.wrapper}play(e){e<0?e=0:e>this._frames.length?e=this._frames.length-1:void 0!==e&&(this.frame=1*e),this.playing=!0,this.timer.play(),this._render(!1),this.onPlay(this)}playForward(e){this.backwards=!1,this.play(e)}playBackwards(e){this.backwards=!0,this.play(e)}pause(){this.playing=!1,this.timer.pause(),this.onStop(this)}stop(){this.playing=!1,this.frame=0,this.timer.pause(),this._displayImg(!0),this.onStop(this)}step(){this.onPlay(this),this.playing=!1,this.timer.step(),this._render(!0),this.onStop(this)}jumpTo(e){e<0?e=0:e>this._frames.length?e=this._frames.length-1:void 0!==e&&(this.frame=1*e),this._render(!0)}stepForwards(){this.backwards=!1,this.step()}stepBackwards(){this.backwards=!0,this.step()}reset(){return void 0!==this.ctx.reset&&(this.ctx.reset(),this.ctx.clear(),this.stop(),this.canvas.width=this.canvas.width),this}}class NDJPlayer{player;options;ui;constructor(e,t,s){const n=this;function o(e){return e.indexOf(".")>0||-1!==e.indexOf("/")}function i(e){return"."===e[0]||"#"===e[0]||null!==document.querySelector(e)}switch(arguments.length){case 2:"Object"===arguments[1].constructor.name&&(s=arguments[1],o(arguments[0])?t=null:(arguments[0]instanceof HTMLElement||i(arguments[0]))&&(t=arguments[0],e=null));break;case 1:switch(!0){case"Object"===arguments[0].constructor.name:s=arguments[0],e=null,t=null;break;case o(arguments[0]):e=arguments[0],t=null,s={};break;case arguments[0]instanceof HTMLElement||i(arguments[0]):t=arguments[0],e=null,s={};break;default:console.log("Unknown parameter was passed to NDJPlayer constructor."),e=null,t=null,s={}}break;case 0:s={}}n.options=Object.assign({controls:!1,resize:!0,onaction:(e,t,s)=>{},onplay:e=>{},onstop:e=>{}},s||{}),this._create(t),this.player=new NdJsonPlayer(e,t,n.options,{onstart:function(e){n._adjustSize(),void 0!==n.options.onstart&&n.options.onstart(e)},onload:function(e){void 0!==n.options.onload&&n.options.onload(e)},onrender:function(e){n._onUpdate(e),void 0!==n.options.onrender&&n.options.onrender(e)},onplay:function(e){n.ui.panel&&(n.ui.play.show=!1,n.ui.step.css.contains("disabled")||(n.ui.step.show=!1),n.ui.pause.show=!0),n.options.onplay(e)},onstop:function(e){n.ui.panel&&(n.ui.play.show=!0,n.ui.step.css.contains("disabled")||(n.ui.step.show=!0),n.ui.pause.show=!1),n.options.onstop(e)},onfinish:function(e){},onerror:function(e){console.log(e)}})}_onUpdate(e){const t=this;if(t.ui){if(t.ui.frames&&(t.ui.frames.text=t.player.currentFrame()+1+"/"+t.player.totalFrames()),t.ui.lapse){let s="";const n=t.player._startTimeStamp&&void 0!==e.ts,o=void 0!==e.t,i=t.player._totTime>0;e.d&&(s=e.d+" "),n?s+=t._formatMillis(e.ts-t.player._startTimeStamp):o&&(s+=e.t.indexOf(":")>0?e.t:t._fmtTime(e.t)),i&&(s+="/"+t.player.totalTime()),t.ui.lapse.text=s}t.ui.progress&&(t.ui.progress.value=(t.player.currentFrame()+1)/t.player.totalFrames()*100)}}_adjustSize(){if(this.options.resize){let e=this.player.wrapper,t=e.parent();if(e.clientHeight>t.clientHeight){let s=this.player.canvas.height/this.player.canvas.width,n=1/s;this.player.canvas.height=t.clientHeight-(this.options.controls?e.querySelector(".panel").clientHeight:0),this.player.canvas.width=t.clientWidth*(s<1?s:n)}}}_create(e){const t=this,s=m2d2.load();t.ui=s(e,t._getUI(e)),t.ui.panel&&["thumb","play","step","pause","stop","lapse","progress","frames","fullscreen"].forEach((e=>{t.ui[e]=t.ui.panel[e]}))}_getUI(e){const t=this;let s={html:e.innerHTML||""};if(t.options.controls&&(s=this._getBasicUI(),"full"===t.options.controls))s.panel.step.css.remove("disabled");this.options.controls;let n=e instanceof Node?e:document.querySelector(e);if(n){n.querySelector("canvas")||(s=Object.assign({canvas:""},s))}else console.log("Root element: "+e+" was not found in document"),s=Object.assign({canvas:""},s);return s}_getBasicUI(){const e=this;return document.addEventListener("fullscreenchange",(t=>{const s=e.player.wrapper;document.fullscreenElement?s.classList.add("fullscreen"):s.classList.remove("fullscreen")})),{caption:"",css:e.options.controls,panel:{tagName:"div",className:"panel",thumb:{tagName:"figure",className:"thumb",img:{src:""},caption:{tagName:"figCaption",className:"caption"}},rec:{tagName:"a",className:"rec",title:"Live",href:"#"},play:{tagName:"a",className:"play",title:"Play",href:"#",onclick:function(){return e.ui.onaction("play",e.player,e),e.player.play(),!1}},pause:{tagName:"a",className:"pause",title:"Pause",href:"#",onclick:function(){return e.ui.onaction("pause",e.player,e),e.player.pause(),!1}},step:{tagName:"a",css:["step","disabled"],title:"Step",href:"#",onclick:function(){return e.ui.onaction("step",e.player,e),e.player.step(),!1}},stop:{tagName:"a",className:"stop",title:"Stop",href:"#",onclick:function(){return e.ui.onaction("stop",e.player,e),e.player.stop(),!1}},lapse:{tagName:"label",className:"lapse",title:"Time elapsed / Time Total",text:"0:00"},live:{tagName:"label",className:"live",text:"Live Feed"},progress:{value:0,max:100,onmousemove:function(t){let s=~~(t.offsetX/this.offsetWidth*100),n=e.player.frameAt(e.player.indexAt(s));n?(e.ui.thumb.show=!0,e.ui.thumb.img.src=e.player.frameBase()+(n.th||n.f),e.ui.thumb.img.onload=function(){const t=e.ui.thumb.img.naturalWidth||e.ui.thumb.img.width;e.ui.thumb.style.width=t+"px"},void 0!==n.tc&&(e.ui.thumb.caption=n.tc),e.ui.thumb.style.left=this.offsetLeft+t.offsetX-e.ui.thumb.clientWidth/2+"px"):e.ui.thumb.show=!1},onmouseleave:function(){e.ui.thumb.show=!1},onclick:function(t){let s=~~(t.offsetX/this.offsetWidth*100),n=e.player.indexAt(s);e.player.jumpTo(n),e.ui.onaction("progress",e.player,e)}},frames:{tagName:"label",className:"frames",title:"Current Frame / Total Frames",text:"0"},fullscreen:{tagName:"a",className:"fullscreen",title:"Full Screen",href:"#",onclick:function(t){const s=e.player.wrapper;return s.classList.contains("fullscreen")?(e.ui.onaction("exit-fullscreen",e.player,e),document.exitFullscreen()):(e.ui.onaction("fullscreen",e.player,e),s.requestFullscreen()),!1}}},onaction:function(t,s,n){e.options.onaction(t,s,n)},onplay:function(t){e.options.onplay(t)},onstop:function(t){e.options.onstop(t,uiPlayer)}}}_fmtTime(e){let t=(e=e.toFixed(2)).split(".")[1]||"00";return(~~(e/60)+"").padStart(2,"0")+":"+(~~(e/60%1*60)+"").padStart(2,"0")+"."+t}_formatMillis(e){function t(e,t){return("00"+e).slice(-1*(t||2))}const s=Math.floor(e/1e3/60/60),n=Math.floor(60*(e/1e3/60/60-s)),o=Math.floor(60*(60*(e/1e3/60/60-s)-n)),i=parseInt(e%1e3/100);return t(s)+":"+t(n)+":"+t(o)+"."+t(i,3)}}function TimerSrc(e,t){let s,n,o,i,a={};a.interval=e,a.checker=50,a.status="init";let r=(new Date).getTime();return s=r-e,a.call=function(e){return t=e,a},a.nocall=function(){return t=null,a},a.exec=function(){return t&&t(),s=(new Date).getTime(),a},a.check=function(){return o&&o(),a},a.play=function(){return o=a.step,a.status="running",a},a.pause=function(){return o=null,a.status="paused",a},a.destroy=function(){for(var e in o=null,clearInterval(n),n=null,a)a[e]=null,delete a[e];a.status="destroyed"},a.step=function(){return r=(new Date).getTime(),i=Math.max(0,a.interval-(r-s)),0===i&&(i=a.interval,s=(new Date).getTime(),t&&t()),a},a.slow=function(){return a.interval=1e3,a},a.fast=function(){return a.interval=e,a},n=setInterval(a.check,a.checker),a}class VideoND extends HTMLElement{constructor(){super(),this._root=this;const e=this,t={autoplay:!1,controls:!1,loop:!1,live:!1,width:"auto",height:"auto",poster:"",preload:"auto",src:"",cc:"auto",caption:"",fullscreen:!1,fps:"",speed:!1,autosize:"auto",sizes:{}||[],thumbs:"auto"},s={};for(let e in t)s[e]=this.getAttribute(e)||this.hasAttribute(e)||t[e];s.onstart=function(t){e.onstart&&e.onstart(t)},s.onload=function(t){e.onload&&e.onload(t)},s.onrender=function(t){e.onrender&&e.onrender(t,n.wrapper,n,n.player.canvas,n.player.ctx)},this.style.display="block",this.className="ndjp";const n=new NDJPlayer(s.src,this,s)}setCaption(e){this._root.querySelector("caption").innerText=e}static get observedAttributes(){return["width","height","caption"]}attributeChangedCallback(e,t,s){"caption"===e&&this.setCaption(s)}}document.addEventListener("DOMContentLoaded",(function(){window.customElements.define("video-nd",VideoND)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=ndjson-player.min.js.map
