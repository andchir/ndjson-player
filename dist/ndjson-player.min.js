/**
 * Author : A.Lepe (dev@alepe.com)
 * License: MIT
 * Version: 0.1.8
 * Updated: 2022-04-26
 * Content: ndjson-player.min.js (Bundle Minimized)
 */

class NdJsonPlayer{fps;loop;showfirst;autoplay;path;playing=!1;loaded=!1;backwards=!1;started=!1;onStart;onLoad;onRender;onFinish;onError;player=null;canvas=null;ctx=null;timer=null;src="";frame=0;multiplier=1;_numFrames=0;_totTime=0;_frames=[];_frameBase="";_startTimeStamp=0;constructor(t,e,s,n,o,i,a,r){const c=this;c.src=t,window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame),c.onStart=n||function(){},c.onLoad=o||function(){},c.onRender=i||function(){},c.onFinish=a||function(){},c.onError=r||function(t){console.log(t)};let l=null;if(e instanceof Node)l=e;else{if("object"==typeof e)s=e,e="canvas";else if("string"!=typeof e)throw"Incorrect parameter passed to constructor of NdJsonPlayer";l=document.querySelector(e||"canvas")}if(!l)throw"Canvas element was not found in DOM: "+e;if("CANVAS"===l.tagName){c.canvas=l;const t=document.createElement("div");l.parentNode.insertBefore(t,l),t.prepend(l),l=t}else if(l.hasChildNodes()){if(c.canvas=l.querySelector("canvas"),!c.canvas)throw"No canvas found in element"}else c.canvas=document.createElement("CANVAS"),l.prepend(c.canvas);c.player=l,c.canvas.height=c.canvas.clientHeight,c.canvas.width=c.canvas.clientWidth,l.classList.add("ndjp"),c.ctx=c.canvas.getContext("2d"),c.fps=s.fps||24,c.loop=s.loop||!1,c.autoplay=s.autoplay||!1,c.showfirst=!1!==s.showfirst,c.path=s.path||"",c.timer=new TimerSrc(1e3/c.fps),c.load((function(t){void 0!==t.w&&(c.canvas.width=t.w),void 0!==t.h&&(c.canvas.height=t.h),void 0!==t.fb&&(c._frameBase=t.fb),void 0!==t.tf&&(c._numFrames=t.tf),void 0!==t.tt&&(c._totTime=t.tt),void 0!==t.ts&&(c._startTimeStamp||(c._startTimeStamp=t.ts)),void 0!==t.fps&&(c.fps=t.fps,c.timer=new TimerSrc(1e3/c.fps)),void 0!==t.f?(c._frames.push(t),c.loaded||(c.loaded=!0,c.autoplay?c.play():c.showfirst&&c.step())):c.onRender(t),c.started||(c.onStart(c),c.started=!0)}))}load(t,e){const s=this;void 0!==e&&(this.src=e,this._frames=[]);const n=new TextDecoder;let o="";return fetch(s.src).then((t=>t.body.getReader())).then((e=>e.read().then((function i({value:a,done:r}){if(r)return t(JSON.parse(o)),void s.onLoad(s);const c=(o+n.decode(a,{stream:!0})).split(/[\r\n](?=.)/);return o=c.pop(),c.map(JSON.parse).forEach(t),e.read().then(i)})))).catch((t=>this.onError(t)))}_render(t){if(null==this.timer)throw"TimerSrc was not initialized";if(0===this._frames.length)throw"Video is empty or no frames were found";this.frame>=this._frames.length&&(this.frame=this.loop?0:this._frames.length-1),this.frame<0&&(this.frame=this.loop?this._frames.length-1:0),this._displayImg(t)}_displayImg(t){const e=this,s=e._frames[e.frame],n=function(){e.onRender(s),e.timer.call((function(){t||(e._increment(),e.timer.nocall()),e._displayImg()}))};if(void 0!==s.f){const t=e._frameBase+s.f;e._image(t,n)}else e.onRender(s),n()}_increment(){this.frame+=this.multiplier*(this.backwards?-1:1),this.frame<0&&(this.loop?this.frame=this._frames.length-1:(this.frame=0,this.pause(),this.onFinish(this))),this.frame>this._frames.length-1&&(this.loop?this.frame=0:(this.frame=this._frames.length-1,this.pause(),this.onFinish(this)))}_draw=function(t,e){const s=this;return 0===t.width&&0===t.height?(t.onerror(),void 0!==e&&e(!1)):(s.ctx.clearRect(0,0,s.canvas.width,s.canvas.height),s.ctx.drawImage(t,0,0,t.width,t.height,0,0,s.canvas.width,s.canvas.height),void 0!==e&&e(!0)),this};_image=function(t,e){const s=this,n=new Image;return n.crossOrigin="",n.onload=function(){s._draw(n,(function(t){t&&void 0!==e&&e(n)}))},n.onerror=function(){const t=s.onError();t&&(n.src=t)},n.src="/"===t[0]||t.match(/^https?:/)||t.match(/^data:image/)?t:s.path+t,this};frameBase(){return this._frameBase}currentFrame(){return this.frame}totalFrames(){return this._numFrames||this._frames.length}totalTime(){return this._totTime||this.currentFrame()/this.fps}frameAt(t){const e=this;let s=t<this.totalFrames()?e._frames[t]:null;return s&&(s.fb=e._frameBase),s}indexAt(t){return~~(t*this.totalFrames()/100)}playerNode(){return this.player}play(t){t<0?t=0:t>this._frames.length?t=this._frames.length-1:void 0!==t&&(this.frame=1*t),this.playing=!0,this.timer.play(),this._render(!1)}playForward(t){this.backwards=!1,this.play(t)}playBackwards(t){this.backwards=!0,this.play(t)}pause(){this.playing=!1,this.timer.pause()}stop(){this.playing=!1,this.frame=0,this.timer.pause(),this._displayImg(!0)}step(t){t<0?t=0:t>this._frames.length?t=this._frames.length-1:void 0!==t&&(this.frame=1*t),this.playing=!1,this.timer.step(),this._render(!0)}stepForwards(){this.backwards=!1,this.step()}stepBackwards(){this.backwards=!0,this.step()}reset(){return void 0!==this.ctx.reset&&(this.ctx.reset(),this.ctx.clear(),this.stop(),this.canvas.width=this.canvas.width),this}}class NDJPlayer{ndjp;options;ui;onAction;constructor(t,e,s,n){const o=this;this.options=Object.assign({controls:!1,resize:!0},s||{}),this.onAction=n||function(){},this._create(e),this.ndjp=new NdJsonPlayer(t,e,s,(function(t){o._adjustSize(),void 0!==o.options.onstart&&o.options.onstart(t)}),(function(t){void 0!==o.options.onload&&o.options.onload(t)}),(function(t){o._onUpdate(t),void 0!==o.options.onrender&&o.options.onrender(t)}),(function(t){}),(function(t){}))}_onUpdate(t){const e=this;if(void 0!==e.ui&&void 0!==e.ui.controls){if(void 0!==e.ui.controls.frames&&(e.ui.controls.frames.text=e.ndjp.currentFrame()+1+"/"+e.ndjp.totalFrames()),void 0!==e.ui.controls.lapse){let s="";const n=e.ndjp._startTimeStamp&&void 0!==t.ts,o=void 0!==t.t,i=e.ndjp._totTime>0;t.d&&(s=t.d+" "),n?s+=e._formatMillis(t.ts-e.ndjp._startTimeStamp):o&&(s+=t.t.indexOf(":")>0?t.t:e._fmtTime(t.t)),i&&(s+="/"+e.ndjp.totalTime()),e.ui.controls.lapse.text=s}void 0!==e.ui.controls.progress&&(e.ui.controls.progress.value=(e.ndjp.currentFrame()+1)/e.ndjp.totalFrames()*100)}}_adjustSize(){if(this.options.resize){let t=this.ndjp.player,e=this.ndjp.player.parentElement;if(t.clientHeight>e.clientHeight){let s=this.ndjp.canvas.height/this.ndjp.canvas.width,n=1/s;this.ndjp.canvas.height=e.clientHeight-(this.options.controls?t.querySelector(".controls").clientHeight:0),this.ndjp.canvas.width=e.clientWidth*(s<1?s:n)}}}_create(t){this.ui=m2d2(t,this._getUI(t))}_getUI(t){const e=this;let s={html:t.innerHTML||""};const n={tagName:"a",className:"play",show:!0,title:"Play",text:"▶️",href:"#",onclick:function(){return e.onAction("play",e.ndjp,e),e.ndjp.play(),e.ui.controls.play.show=!1,e.ui.controls.pause.show=!0,!1}},o={tagName:"a",className:"pause",show:!1,title:"Pause",text:"⏸️",href:"#",onclick:function(){return e.onAction("pause",e.ndjp,e),e.ndjp.pause(),e.ui.controls.play.show=!0,e.ui.controls.pause.show=!1,!1}},i={tagName:"a",className:"stop",title:"Stop",text:"⏹️",href:"#",onclick:function(){return e.onAction("stop",e.ndjp,e),e.ndjp.stop(),!1}};document.addEventListener("fullscreenchange",(t=>{const s=e.ndjp.player;document.fullscreenElement?s.classList.add("fullscreen"):s.classList.remove("fullscreen")}));const a={tagName:"a",className:"fullscreen",title:"Full Screen",text:"⛶",href:"#",onclick:function(t){const s=e.ndjp.player;return s.classList.contains("fullscreen")?document.exitFullscreen():s.requestFullscreen(),!1}},r={tagName:"label",className:"lapse",show:!0,title:"Time elapsed / Time Total",text:"0:00"},c={tagName:"label",className:"frames",show:!0,title:"Current Frame / Total Frames",text:"0"},l={show:!0,value:0,max:100,onmousemove:function(t){let s=~~(t.offsetX/this.offsetWidth*100),n=e.ndjp.frameAt(e.ndjp.indexAt(s));if(n){e.ui.controls.thumb.show=!0,e.ui.controls.thumb.img.src=e.ndjp.frameBase()+(n.th||n.f),void 0!==n.tc&&(e.ui.controls.thumb.caption=n.tc);let s=e.ui.controls.thumb._node;s.style.left=this.offsetLeft+t.offsetX-s.clientWidth/2+"px"}else e.ui.controls.thumb.show=!1},onmouseleave:function(){e.ui.controls.thumb.show=!1},onclick:function(t){let s=~~(t.offsetX/this.offsetWidth*100),n=e.ndjp.indexAt(s);e.ndjp.step(n),e.onAction("progress",e.ndjp,e)}};if(this.options.controls){const t="full"===this.options.controls,e="common"===this.options.controls;s=this._getBasicUI(),s.controls.play=n,s.controls.pause=o,t&&(s.controls.stop=i),s.controls.lapse=r,s.controls.progress=l,(e||t)&&(s.controls.frames=c),t&&(s.controls.fullscreen=a)}this.options.controls;let h=t instanceof Node?t:document.querySelector(t);if(h){h.querySelector("canvas")||(s=Object.assign({canvas:""},s))}else console.log("Root element: "+t+" was not found in document"),s=Object.assign({canvas:""},s);return s}_getBasicUI(){return{caption:"",controls:{tagName:"div",className:"controls",thumb:{tagName:"figure",className:"thumb",show:!1,img:{src:""},caption:{tagName:"figCaption",className:"caption",show:!1}}}}}_fmtTime(t){let e=(t=t.toFixed(2)).split(".")[1]||"00";return(~~(t/60)+"").padStart(2,"0")+":"+(~~(t/60%1*60)+"").padStart(2,"0")+"."+e}_formatMillis(t){function e(t,e){return("00"+t).slice(-1*(e||2))}const s=Math.floor(t/1e3/60/60),n=Math.floor(60*(t/1e3/60/60-s)),o=Math.floor(60*(60*(t/1e3/60/60-s)-n)),i=parseInt(t%1e3/100);return e(s)+":"+e(n)+":"+e(o)+"."+e(i,3)}}function TimerSrc(t,e){let s,n,o,i,a={};a.interval=t,a.checker=50,a.status="init";let r=(new Date).getTime();return s=r-t,a.call=function(t){return e=t,a},a.nocall=function(){return e=null,a},a.exec=function(){return e&&e(),s=(new Date).getTime(),a},a.check=function(){return o&&o(),a},a.play=function(){return o=a.step,a.status="running",a},a.pause=function(){return o=null,a.status="paused",a},a.destroy=function(){for(var t in o=null,clearInterval(n),n=null,a)a[t]=null,delete a[t];a.status="destroyed"},a.step=function(){return r=(new Date).getTime(),i=Math.max(0,a.interval-(r-s)),0===i&&(i=a.interval,s=(new Date).getTime(),e&&e()),a},a.slow=function(){return a.interval=1e3,a},a.fast=function(){return a.interval=t,a},n=setInterval(a.check,a.checker),a}class VideoND extends HTMLElement{constructor(){super();const t={autoplay:!1,controls:!1,loop:!1,width:"auto",height:"auto",poster:"",preload:"auto",src:"",cc:"auto",caption:"",fullscreen:!1,fps:"",speed:!1,autosize:"auto",sizes:{}||[],thumbs:"auto"},e={};for(let s in t)e[s]=this.getAttribute(s)||this.hasAttribute(s)||t[s];e.onstart=function(t){s.onstart&&s.onstart(t)},e.onload=function(t){s.onload&&s.onload(t)},e.onrender=function(t){s.onrender&&s.onrender(t,n.ndjp,n,n.ndjp.canvas,n.ndjp.ctx)},this.style.display="block",this.className="ndjp",this._root=this;const s=this,n=new NDJPlayer(e.src,this,e,(function(t,e,n){s.onaction&&s.onaction(t,e,n)}))}setCaption(t){this._root.querySelector("caption").innerText=t}static get observedAttributes(){return["width","height","caption"]}attributeChangedCallback(t,e,s){"caption"===t&&this.setCaption(s)}}document.addEventListener("DOMContentLoaded",(function(){window.customElements.define("video-nd",VideoND)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=ndjson-player.min.js.map
