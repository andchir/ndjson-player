/**
 * Author : A.Lepe (dev@alepe.com)
 * License: MIT
 * Version: 0.1.8
 * Updated: 2022-05-16
 * Content: ndjson-player.headless.min.js (Bundle 'No M2D2 included' Minimized)
 */

class NdJsonPlayer{fps;loop;showfirst;autoplay;live;path;playing=!1;loaded=!1;backwards=!1;started=!1;onStart;onLoad;onRender;onPlay;onStop;onFinish;onError;wrapper=null;canvas=null;ctx=null;timer=null;src="";frame=0;multiplier=1;_numFrames=0;_totTime=0;_frames=[];_frameBase="";_thumbBase="";_startTimeStamp=0;constructor(t,e,s,a){const n=this;n.src=t,window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame);const i=()=>{};a=Object.assign({},a),n.onStart=a.onstart||i,n.onLoad=a.onload||i,n.onRender=a.onrender||i,n.onPlay=a.onplay||i,n.onStop=a.onstop||i,n.onFinish=a.onfinish||i,n.onError=a.onerror||(t=>{console.log(t)});let o=null;if(e instanceof Node)o=e;else{if("object"==typeof e)s=e,e="canvas";else if("string"!=typeof e)throw"Incorrect parameter passed to constructor of NdJsonPlayer";o=document.querySelector(e||"canvas")}if(!o)throw"Canvas element was not found in DOM: "+e;if("CANVAS"===o.tagName){n.canvas=o;const t=document.createElement("div");o.parentNode.insertBefore(t,o),t.prepend(o),o=t}else if(o.hasChildNodes()){if(n.canvas=o.querySelector("canvas"),!n.canvas)throw"No canvas found in element"}else n.canvas=document.createElement("CANVAS"),o.prepend(n.canvas);n.wrapper=o,n.canvas.width=n.wrapper.parent().clientWidth,n.canvas.height=n.wrapper.parent().clientHeight,o.classList.add("ndjp"),n.ctx=n.canvas.getContext("2d"),n.fps=s.fps||24,n.loop=s.loop||!1,n.live=s.live||!1,n.autoplay=s.autoplay||n.live||!1,n.showfirst=!1!==s.showfirst,n.path=s.path||"","auto"===s.width&&(s.width=0),"auto"===s.height&&(s.height=0),n.timer=new TimerSrc(1e3/n.fps),n.live?new TimerSrc(1e3/n.fps,(()=>{fetch(n.src).then((t=>t.json())).then((t=>{n.reload(t)}))})).play():n.src?n.load():console.log("Initializing without source...")}_reset(){this._frames=[],this._totTime=0,this._numFrames=0,this._startTimeStamp=0,this.loaded=!1}load(t,e){const s=this;void 0!==e&&(this.src=e,this._reset());const a=new TextDecoder;let n="";return fetch(s.src).then((t=>t.body.getReader())).then((e=>e.read().then((function i({value:o,done:r}){if(r){const e=JSON.parse(n);return s.processFrame(e),t&&t(e),void s.onLoad(s)}const l=(n+a.decode(o,{stream:!0})).split(/[\r\n](?=.)/);return n=l.pop(),l.map(JSON.parse).forEach((e=>{s.processFrame(e),t&&t(e)})),e.read().then(i)})))).catch((t=>this.onError(t)))}reload(t,e){const s=this,a=[];switch(s._reset(),!0){case"string"==typeof t:a=t.split(/[\r\n](?=.)/.map(JSON.parse));break;case Array.isArray(t):a=t;break;case"Object"===t.constructor.name:a.push(t);break;default:return void console.log("Unable to reload frames. ")}a.forEach((t=>{s.processFrame(t),e&&e(t)}))}append(t){this._frames.push(t)}prepend(t){this._frames.unshift(t),this.frame++}processFrame(t){const e=this;void 0!==t.w&&(e.canvas.width=t.w),void 0!==t.h&&(e.canvas.height=t.h),void 0!==t.fb&&(e._frameBase=t.fb),void 0!==t.thb&&(e._thumbBase=t.thb),void 0!==t.tf&&(e._numFrames=t.tf),void 0!==t.tt&&(e._totTime=t.tt),void 0!==t.ts&&(e._startTimeStamp||(e._startTimeStamp=t.ts)),void 0!==t.fps&&(e.fps=t.fps,e.timer=new TimerSrc(1e3/e.fps)),void 0!==t.f?(e._frames.push(t),e.loaded||(e.loaded=!0,e.autoplay?e.play():e.showfirst&&e.step())):e.onRender(t),e.started||(e.onStart(e),e.started=!0)}_render(t){if(null==this.timer)throw"TimerSrc was not initialized";if(0===this._frames.length)throw"Video is empty or no frames were found";this.frame>=this._frames.length-1&&(this.frame=this.loop?0:this._frames.length-1),this.frame<0&&(this.frame=this.loop?this._frames.length-1:0),this._displayImg(t)}_displayImg(t){const e=this,s=e._frames[e.frame],a=function(){e.onRender(s),e.timer.call((function(){e._increment(),t||e.timer.nocall(),e._displayImg()}))};if(void 0!==s.f){const t=e._frameBase+s.f;e._image(t,a)}else e.onRender(s),a()}_increment(){this.frame+=this.multiplier*(this.backwards?-1:1),this.frame<0&&(this.loop?this.frame=this._frames.length-1:(this.frame=0,this.pause(),this.onFinish(this))),this.frame>this.totalFrames()-1&&(this.loop?this.frame=0:(this.frame=this._frames.length-1,this.pause(),this.onFinish(this)))}_draw=function(t,e){const s=this;return 0===t.width&&0===t.height?(t.onerror(),void 0!==e&&e(!1)):(s.ctx.clearRect(0,0,s.canvas.width,s.canvas.height),s.ctx.drawImage(t,0,0,t.width,t.height,0,0,s.canvas.width,s.canvas.height),void 0!==e&&e(!0)),this};_image=function(t,e){const s=this,a=new Image;return a.crossOrigin="",a.onload=function(){s._draw(a,(function(t){t&&void 0!==e&&e(a)}))},a.onerror=function(){const t=s.onError();t&&(a.src=t)},a.src="/"===t[0]||t.match(/^https?:/)||t.match(/^data:image/)?t:s.path+t,this};frameBase(){return this._frameBase}currentFrame(){return this.frame}totalFrames(){return this._numFrames||this._frames.length}totalTime(){return this._totTime||this.currentFrame()/this.fps}frameAt(t){const e=this;let s=t<this.totalFrames()?e._frames[t]:null;return s&&(s.fb=e._frameBase),s}indexAt(t){return~~(t*this.totalFrames()/100)}playerNode(){return this.wrapper}play(t){t<0?t=0:t>this._frames.length?t=this._frames.length-1:void 0!==t&&(this.frame=1*t),this.playing=!0,this.timer.play(),this._render(!1),this.onPlay(this)}playForward(t){this.backwards=!1,this.play(t)}playBackwards(t){this.backwards=!0,this.play(t)}pause(){this.playing=!1,this.timer.pause(),this.onStop(this)}stop(){this.playing=!1,this.frame=0,this.timer.pause(),this._displayImg(!0),this.onStop(this)}step(){this.onPlay(this),this.playing=!1,this.timer.step(),this._render(!0),this.onStop(this)}jumpTo(t){t<0?t=0:t>this._frames.length?t=this._frames.length-1:void 0!==t&&(this.frame=1*t),this._render(!0)}stepForwards(){this.backwards=!1,this.step()}stepBackwards(){this.backwards=!0,this.step()}reset(){return void 0!==this.ctx.reset&&(this.ctx.reset(),this.ctx.clear(),this.stop(),this.canvas.width=this.canvas.width),this}}class NDJPlayer{player;options;ui;constructor(t,e,s){const a=this;function n(t){return t.indexOf(".")>0||-1!==t.indexOf("/")}function i(t){return"."===t[0]||"#"===t[0]||null!==document.querySelector(t)}switch(arguments.length){case 2:"Object"===arguments[1].constructor.name&&(s=arguments[1],n(arguments[0])?e=null:(arguments[0]instanceof HTMLElement||i(arguments[0]))&&(e=arguments[0],t=null));break;case 1:switch(!0){case"Object"===arguments[0].constructor.name:s=arguments[0],t=null,e=null;break;case n(arguments[0]):t=arguments[0],e=null,s={};break;case arguments[0]instanceof HTMLElement||i(arguments[0]):e=arguments[0],t=null,s={};break;default:console.log("Unknown parameter was passed to NDJPlayer constructor."),t=null,e=null,s={}}break;case 0:s={}}a.options=Object.assign({controls:!1,resize:!0,onaction:(t,e,s)=>{},onplay:t=>{},onstop:t=>{}},s||{}),this._create(e),this.player=new NdJsonPlayer(t,e,a.options,{onstart:function(t){a._adjustSize(),void 0!==a.options.onstart&&a.options.onstart(t)},onload:function(t){void 0!==a.options.onload&&a.options.onload(t)},onrender:function(t){a._onUpdate(t),void 0!==a.options.onrender&&a.options.onrender(t)},onplay:function(t){a.ui.panel&&(a.ui.play.show=!1,a.ui.step.css.contains("disabled")||(a.ui.step.show=!1),a.ui.pause.show=!0),a.options.onplay(t)},onstop:function(t){a.ui.panel&&(a.ui.play.show=!0,a.ui.step.css.contains("disabled")||(a.ui.step.show=!0),a.ui.pause.show=!1),a.options.onstop(t)},onfinish:function(t){},onerror:function(t){console.log(t)}}),window.addEventListener("resize",(function(t){a._adjustSize()}),!0)}_onUpdate(t){const e=this;if(e.ui){if(e.ui.frames&&(e.ui.frames.text=e.player.currentFrame()+1+"/"+e.player.totalFrames()),e.ui.lapse){let s="";const a=e.player._startTimeStamp&&void 0!==t.ts,n=void 0!==t.t,i=e.player._totTime>0;t.d&&(s=t.d+" "),a?s+=e._formatMillis(t.ts-e.player._startTimeStamp):n&&(s+=t.t.indexOf(":")>0?t.t:e._fmtTime(t.t)),i&&(s+="/"+e.player.totalTime()),e.ui.lapse.text=s}e.ui.progress&&e.player.totalFrames()&&(e.ui.progress.value=Math.round((e.player.currentFrame()+1)/e.player.totalFrames()*100))}}_adjustSize(){if(this.options.resize){let t=this.player.wrapper,e=t.parent(),s=(this.options.height||this.player.canvas.height)/(this.options.width||this.player.canvas.width);this.player.canvas.height=e.clientHeight-(this.options.controls?t.querySelector(".panel").clientHeight:0),this.player.canvas.width=this.player.canvas.height/s}}_create(t){const e=this;if(m2d2){const s=m2d2.load();e.ui=s(t,e._getUI(t)),e.ui.panel&&["thumb","play","step","pause","stop","lapse","progress","frames","fullscreen"].forEach((t=>{e.ui[t]=e.ui.panel[t]}))}else console.log("M2D2 was not found. Either use the standard version (which includes M2D2) or add M2D2 in your dependencies.")}_getUI(t){const e=this;let s={html:t.innerHTML||""};if(e.options.controls&&(s=this._getBasicUI(),"full"===e.options.controls))s.panel.step.css.remove("disabled");this.options.controls;let a=t instanceof Node?t:document.querySelector(t);if(a){a.querySelector("canvas")||(s=Object.assign({canvas:""},s))}else console.log("Root element: "+t+" was not found in document"),s=Object.assign({canvas:""},s);return s}_getBasicUI(){const t=this;return document.addEventListener("fullscreenchange",(e=>{const s=t.player.wrapper;document.fullscreenElement?s.classList.add("fullscreen"):s.classList.remove("fullscreen")})),{caption:"",css:t.options.controls,panel:{tagName:"div",className:"panel",thumb:{tagName:"figure",className:"thumb",img:{src:""},caption:{tagName:"figCaption",className:"caption"}},rec:{tagName:"a",className:"rec",title:"Live",href:"#"},play:{tagName:"a",className:"play",title:"Play",href:"#",onclick:function(){return t.ui.onaction("play",t.player,t),t.player.play(),!1}},pause:{tagName:"a",className:"pause",title:"Pause",href:"#",onclick:function(){return t.ui.onaction("pause",t.player,t),t.player.pause(),!1}},step:{tagName:"a",css:["step","disabled"],title:"Step",href:"#",onclick:function(){return t.ui.onaction("step",t.player,t),t.player.step(),!1}},stop:{tagName:"a",className:"stop",title:"Stop",href:"#",onclick:function(){return t.ui.onaction("stop",t.player,t),t.player.stop(),!1}},lapse:{tagName:"label",className:"lapse",title:"Time elapsed / Time Total",text:"0:00"},live:{tagName:"label",className:"live",text:"Live Feed"},progress:{value:0,max:100,onmousemove:function(e){let s=~~(e.offsetX/this.offsetWidth*100),a=t.player.frameAt(t.player.indexAt(s));a?(t.ui.thumb.show=!0,t.ui.thumb.img.src=t.player.frameBase()+(a.th||a.f),t.ui.thumb.img.onload=function(){const e=t.ui.thumb.img.naturalWidth||t.ui.thumb.img.width;t.ui.thumb.style.width=e+"px"},void 0!==a.tc&&(t.ui.thumb.caption=a.tc),t.ui.thumb.style.left=this.offsetLeft+e.offsetX-t.ui.thumb.clientWidth/2+"px"):t.ui.thumb.show=!1},onmouseleave:function(){t.ui.thumb.show=!1},onclick:function(e){let s=~~(e.offsetX/this.offsetWidth*100),a=t.player.indexAt(s);t.player.jumpTo(a),t.ui.onaction("progress",t.player,t)}},frames:{tagName:"label",className:"frames",title:"Current Frame / Total Frames",text:"0"},fullscreen:{tagName:"a",className:"fullscreen",title:"Full Screen",href:"#",onclick:function(e){const s=t.player.wrapper;return s.classList.contains("fullscreen")?(t.ui.onaction("exit-fullscreen",t.player,t),document.exitFullscreen()):(t.ui.onaction("fullscreen",t.player,t),s.requestFullscreen()),!1}}},onaction:function(e,s,a){t.options.onaction(e,s,a)},onplay:function(e){t.options.onplay(e)},onstop:function(e){t.options.onstop(e,uiPlayer)}}}_fmtTime(t){let e=(t=t.toFixed(2)).split(".")[1]||"00";return(~~(t/60)+"").padStart(2,"0")+":"+(~~(t/60%1*60)+"").padStart(2,"0")+"."+e}_formatMillis(t){function e(t,e){return("00"+t).slice(-1*(e||2))}const s=Math.floor(t/1e3/60/60),a=Math.floor(60*(t/1e3/60/60-s)),n=Math.floor(60*(60*(t/1e3/60/60-s)-a)),i=parseInt(t%1e3/100);return e(s)+":"+e(a)+":"+e(n)+"."+e(i,3)}}function TimerSrc(t,e){let s,a,n,i,o={};o.interval=t,o.checker=50,o.status="init";let r=(new Date).getTime();return s=r-t,o.call=function(t){return e=t,o},o.nocall=function(){return e=null,o},o.exec=function(){return e&&e(),s=(new Date).getTime(),o},o.check=function(){return n&&n(),o},o.play=function(){return n=o.step,o.status="running",o},o.pause=function(){return n=null,o.status="paused",o},o.destroy=function(){for(var t in n=null,clearInterval(a),a=null,o)o[t]=null,delete o[t];o.status="destroyed"},o.step=function(){return r=(new Date).getTime(),i=Math.max(0,o.interval-(r-s)),0===i&&(i=o.interval,s=(new Date).getTime(),e&&e()),o},o.slow=function(){return o.interval=1e3,o},o.fast=function(){return o.interval=t,o},a=setInterval(o.check,o.checker),o}class VideoND extends HTMLElement{constructor(){super(),this._root=this;const t=this,e={autoplay:!1,controls:!1,loop:!1,live:!1,width:"auto",height:"auto",poster:"",preload:"auto",src:"",cc:"auto",caption:"",fullscreen:!1,fps:"",speed:!1,autosize:"auto",sizes:{}||[],thumbs:"auto"},s={};for(let t in e)s[t]=this.getAttribute(t)||this.hasAttribute(t)||e[t];s.onstart=function(e){t.onstart&&t.onstart(e)},s.onload=function(e){t.onload&&t.onload(e)},s.onrender=function(e){t.onrender&&t.onrender(e,a.wrapper,a,a.player.canvas,a.player.ctx)},this.style.display="block",this.className="ndjp";const a=new NDJPlayer(s.src,this,s)}setCaption(t){this._root.querySelector("caption").innerText=t}static get observedAttributes(){return["width","height","caption"]}attributeChangedCallback(t,e,s){"caption"===t&&this.setCaption(s)}}document.addEventListener("DOMContentLoaded",(function(){window.customElements.define("video-nd",VideoND)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=ndjson-player.headless.min.js.map
